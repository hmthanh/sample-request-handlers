{"version":3,"sources":["store/utils.js","components/Header/Header.module.css","scenes/Home/Home.module.css","serviceWorker.js","redux/reducers/users.js","redux/reducers/index.js","redux/constants/users.js","store/index.js","components/Header/Header.js","hooks/useToggle/useToggle.js","components/SuccessModal/SuccessModal.js","scenes/Home/Home.js","redux/selectors/users.js","redux/actions/users.js","redux/apis/users.js","App.js","index.js"],"names":["composeEnhancers","process","browser","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","module","exports","Boolean","location","hostname","match","initialState","data","isLoading","isFailed","combineReducers","users","state","action","type","payload","configureStore","enhancer","applyMiddleware","thunk","store","createStore","rootReducers","CustomHeader","Header","Layout","className","styles","brandName","useToggle","useState","undefined","active","setStateActive","setActive","useCallback","setInActive","toggle","useMemo","SuccessModal","isOpen","onOk","title","visible","footer","key","onClick","itemLayout","dataSource","renderItem","user","fullName","first_name","last_name","Item","Meta","avatar","src","description","email","Home","dispatch","useDispatch","successModalToggle","usersSelector","useSelector","displayError","Modal","error","content","Promise","resolve","reject","a","axios","get","response","then","catch","container","App","Footer","Content","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c3fc9b82.chunk.js","sourcesContent":["import {compose} from 'redux';\r\n\r\nexport const composeEnhancers =\r\n  (process.browser &&\r\n    window &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      trace: true,\r\n      traceLimit: 25,\r\n    })) ||\r\n  compose;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandName\":\"Header_brandName__1w0Qo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1YJz0\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  USERS_GET_REQUESTED,\r\n  USERS_GET_FAILED,\r\n  USERS_GET_SUCCESS,\r\n} from '../constants/users';\r\n\r\nconst initialState = {\r\n  data: [],\r\n  isLoading: false,\r\n  isFailed: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  const {type, payload} = action;\r\n\r\n  switch (type) {\r\n    case USERS_GET_REQUESTED: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isFailed: false,\r\n      };\r\n    }\r\n    case USERS_GET_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        data: payload,\r\n        isLoading: false,\r\n        isFailed: false,\r\n      };\r\n    }\r\n    case USERS_GET_FAILED: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isFailed: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {combineReducers} from 'redux';\r\n\r\nimport usersReducer from './users';\r\n\r\nexport default combineReducers({\r\n  users: usersReducer,\r\n});\r\n","export const USERS_GET_REQUESTED = 'users/GET_REQUESTED';\r\nexport const USERS_GET_SUCCESS = 'users/GET_SUCCESS';\r\nexport const USERS_GET_FAILED = 'users/GET_FAILED';\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducers from '../redux/reducers';\r\n\r\nimport {composeEnhancers} from './utils';\r\n\r\nfunction configureStore(initialState = {}) {\r\n  const enhancer = composeEnhancers(applyMiddleware(thunk));\r\n  const store = createStore(rootReducers, initialState, enhancer);\r\n\r\n  return store;\r\n}\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport {Layout} from 'antd';\r\n\r\nimport styles from './Header.module.css';\r\n\r\nconst CustomHeader = () => {\r\n  const {Header} = Layout;\r\n\r\n  return (\r\n    <Header>\r\n      <div className={styles.brandName}>Sample</div>\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default CustomHeader;\r\n","import {useState, useCallback, useMemo} from 'react';\r\n\r\nconst useToggle = (initialState) => {\r\n  const [active, setStateActive] = useState(\r\n    initialState !== undefined ? initialState : false,\r\n  );\r\n\r\n  const setActive = useCallback(() => {\r\n    setStateActive(true);\r\n  }, []);\r\n\r\n  const setInActive = useCallback(() => {\r\n    setStateActive(false);\r\n  }, []);\r\n\r\n  const toggle = useCallback(\r\n    (state) => {\r\n      setStateActive(typeof state === 'boolean' ? state : !active);\r\n    },\r\n    [active],\r\n  );\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      active,\r\n      setActive,\r\n      setInActive,\r\n      toggle,\r\n    };\r\n  }, [active, setActive, setInActive, toggle]);\r\n};\r\n\r\nexport default useToggle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, List, Avatar} from 'antd';\r\nimport Modal from 'antd/lib/modal/Modal';\r\n\r\nconst SuccessModal = ({isOpen, onOk, data}) => {\r\n  return (\r\n    <Modal\r\n      title=\"Users\"\r\n      visible={isOpen}\r\n      onOk={onOk}\r\n      footer={[\r\n        <Button key=\"submit\" type=\"primary\" onClick={onOk}>\r\n          OK\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={data}\r\n        renderItem={(user) => {\r\n          const fullName = `${user.first_name} ${user.last_name}`;\r\n          return (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                avatar={<Avatar src={user.avatar} />}\r\n                title={fullName}\r\n                description={user.email}\r\n              />\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n      ,\r\n    </Modal>\r\n  );\r\n};\r\n\r\nSuccessModal.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  onOk: PropTypes.func,\r\n  data: PropTypes.array,\r\n};\r\n\r\nexport default SuccessModal;\r\n","import React, {useCallback} from 'react';\r\nimport {Button, Spin, Modal} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {getUsers} from '../../redux/actions/users';\r\nimport {selectUsers} from '../../redux/selectors/users';\r\n\r\nimport useToggle from '../../hooks/useToggle';\r\n\r\nimport SuccessModal from '../../components/SuccessModal';\r\n\r\nimport styles from './Home.module.css';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const successModalToggle = useToggle();\r\n\r\n  const usersSelector = useSelector(selectUsers());\r\n\r\n  const displayError = useCallback(() => {\r\n    Modal.error({\r\n      title: 'This is an error message',\r\n      content: 'some messages...some messages...',\r\n    });\r\n  }, []);\r\n\r\n  const onClick = useCallback(() => {\r\n    dispatch(getUsers())\r\n      .then(() => {\r\n        successModalToggle.setActive();\r\n      })\r\n      .catch(() => {\r\n        displayError();\r\n      });\r\n  }, [dispatch, successModalToggle, displayError]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Button type=\"primary\" onClick={onClick}>\r\n        {usersSelector.isLoading ? <Spin /> : 'Click me!'}\r\n      </Button>\r\n\r\n      <SuccessModal\r\n        isOpen={successModalToggle.active}\r\n        onOk={() => successModalToggle.setInActive()}\r\n        data={usersSelector.data}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export const selectUsers = () => {\r\n  return (state) => {\r\n    return state.users;\r\n  };\r\n};\r\n","import {fetchGetUsers} from '../apis/users';\r\nimport {\r\n  USERS_GET_REQUESTED,\r\n  USERS_GET_FAILED,\r\n  USERS_GET_SUCCESS,\r\n} from '../constants/users';\r\n\r\nexport const getUsers = () => {\r\n  return (dispatch) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        dispatch({\r\n          type: USERS_GET_REQUESTED,\r\n        });\r\n\r\n        const response = await fetchGetUsers();\r\n\r\n        dispatch({\r\n          type: USERS_GET_SUCCESS,\r\n          payload: response.data.data,\r\n        });\r\n\r\n        resolve(response.data);\r\n      } catch (err) {\r\n        reject(err);\r\n        dispatch({\r\n          type: USERS_GET_FAILED,\r\n        });\r\n      }\r\n    });\r\n  };\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const fetchGetUsers = () => {\r\n  return axios.get('https://reqres.in/api/users');\r\n};\r\n","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {Layout} from 'antd';\r\n\r\nimport store from './store/index';\r\n\r\nimport Header from './components/Header';\r\n\r\nimport Home from './scenes/Home';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const {Footer, Content} = Layout;\r\n\r\n  return (\r\n    <Provider store={store()}>\r\n      <Layout>\r\n        <Header />\r\n        <Content>\r\n          <Home />\r\n        </Content>\r\n        <Footer />\r\n      </Layout>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}